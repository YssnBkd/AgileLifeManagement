Supabase Database Initial Setup Query :

-- Enable Row Level Security and Create Schema
CREATE SCHEMA IF NOT EXISTS agile_life;

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create ENUMs for various types
CREATE TYPE agile_life.task_priority AS ENUM ('LOW', 'MEDIUM', 'HIGH', 'URGENT');
CREATE TYPE agile_life.task_status AS ENUM ('BACKLOG', 'TODO', 'IN_PROGRESS', 'BLOCKED', 'REVIEW', 'DONE');
CREATE TYPE agile_life.goal_category AS ENUM ('PERSONAL', 'PROFESSIONAL', 'HEALTH', 'FINANCIAL', 'LEARNING', 'OTHER');

-- Create Tables

-- User table (leveraging Supabase Auth)
CREATE TABLE agile_life.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id),
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    profile_image_url TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Sprint table
CREATE TABLE agile_life.sprints (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    summary TEXT,
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT FALSE,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Goal table
CREATE TABLE agile_life.goals (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    summary TEXT,
    category agile_life.goal_category NOT NULL,
    deadline TIMESTAMPTZ,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Task table
CREATE TABLE agile_life.tasks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    summary TEXT,
    due_date TIMESTAMPTZ,
    priority agile_life.task_priority NOT NULL DEFAULT 'MEDIUM',
    status agile_life.task_status NOT NULL DEFAULT 'TODO',
    estimated_effort INTEGER NOT NULL DEFAULT 0,
    actual_effort INTEGER,
    is_recurring BOOLEAN NOT NULL DEFAULT FALSE,
    recurring_pattern JSONB,
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Tag table
CREATE TABLE agile_life.tags (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    color TEXT NOT NULL,
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- DailyCheckup table
CREATE TABLE agile_life.daily_checkups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date TIMESTAMPTZ NOT NULL,
    sprint_id UUID NOT NULL REFERENCES agile_life.sprints(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    notes TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- SprintReview table
CREATE TABLE agile_life.sprint_reviews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sprint_id UUID NOT NULL REFERENCES agile_life.sprints(id) ON DELETE CASCADE,
    date TIMESTAMPTZ NOT NULL,
    rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (sprint_id) -- Ensure one review per sprint
);

-- Notification table
CREATE TABLE agile_life.notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    scheduled_time TIMESTAMPTZ NOT NULL,
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    related_entity_id UUID,
    related_entity_type TEXT CHECK (related_entity_type IN ('task', 'sprint', 'goal')),
    user_id UUID NOT NULL REFERENCES agile_life.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Junction tables
CREATE TABLE agile_life.task_sprint_cross_refs (
    task_id UUID NOT NULL REFERENCES agile_life.tasks(id) ON DELETE CASCADE,
    sprint_id UUID NOT NULL REFERENCES agile_life.sprints(id) ON DELETE CASCADE
);

CREATE TABLE agile_life.task_goal_cross_refs (
    task_id UUID NOT NULL REFERENCES agile_life.tasks(id) ON DELETE CASCADE,
    goal_id UUID NOT NULL REFERENCES agile_life.goals(id) ON DELETE CASCADE
);

CREATE TABLE agile_life.goal_sprint_cross_refs (
    goal_id UUID NOT NULL REFERENCES agile_life.goals(id) ON DELETE CASCADE,
    sprint_id UUID NOT NULL REFERENCES agile_life.sprints(id) ON DELETE CASCADE
);

CREATE TABLE agile_life.task_dependencies (
    task_id UUID NOT NULL REFERENCES agile_life.tasks(id) ON DELETE CASCADE,
    depends_on_task_id UUID NOT NULL REFERENCES agile_life.tasks(id) ON DELETE CASCADE
    CHECK (task_id <> depends_on_task_id) -- Prevent self-dependency
);

CREATE TABLE agile_life.task_tag_cross_refs (
    task_id UUID NOT NULL REFERENCES agile_life.tasks(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES agile_life.tags(id) ON DELETE CASCADE   
);

CREATE TABLE agile_life.sprint_tag_cross_refs (
    sprint_id UUID NOT NULL REFERENCES agile_life.sprints(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES agile_life.tags(id) ON DELETE CASCADE
);

CREATE TABLE agile_life.goal_tag_cross_refs (
    goal_id UUID NOT NULL REFERENCES agile_life.goals(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES agile_life.tags(id) ON DELETE CASCADE
);


-- Create indexes for common queries
CREATE INDEX idx_sprints_user_id ON agile_life.sprints(user_id);
CREATE INDEX idx_tasks_user_id ON agile_life.tasks(user_id);
CREATE INDEX idx_goals_user_id ON agile_life.goals(user_id);
CREATE INDEX idx_tasks_status ON agile_life.tasks(status);
CREATE INDEX idx_tasks_due_date ON agile_life.tasks(due_date);
CREATE INDEX idx_tasks_priority ON agile_life.tasks(priority);
CREATE INDEX idx_sprints_active ON agile_life.sprints(is_active);
CREATE INDEX idx_goals_completed ON agile_life.goals(is_completed);
CREATE INDEX idx_task_sprint_refs_sprint_id ON agile_life.task_sprint_cross_refs(sprint_id);
CREATE INDEX idx_task_goal_refs_goal_id ON agile_life.task_goal_cross_refs(goal_id);
CREATE INDEX idx_goal_sprint_refs_sprint_id ON agile_life.goal_sprint_cross_refs(sprint_id);

-- Enable Row-Level Security (RLS) on all tables
ALTER TABLE agile_life.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.sprints ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.daily_checkups ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.sprint_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.task_sprint_cross_refs ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.task_goal_cross_refs ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.goal_sprint_cross_refs ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.task_dependencies ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.task_tag_cross_refs ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.sprint_tag_cross_refs ENABLE ROW LEVEL SECURITY;
ALTER TABLE agile_life.goal_tag_cross_refs ENABLE ROW LEVEL SECURITY;

-- Create policies for each table
-- USER POLICIES
CREATE POLICY user_self_select ON agile_life.users
    FOR SELECT
    USING (auth.uid() = id);

CREATE POLICY user_self_update ON agile_life.users
    FOR UPDATE
    USING (auth.uid() = id);

-- SPRINT POLICIES
CREATE POLICY sprint_select_own ON agile_life.sprints
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY sprint_insert_own ON agile_life.sprints
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY sprint_update_own ON agile_life.sprints
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY sprint_delete_own ON agile_life.sprints
    FOR DELETE
    USING (auth.uid() = user_id);

-- GOAL POLICIES
CREATE POLICY goal_select_own ON agile_life.goals
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY goal_insert_own ON agile_life.goals
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY goal_update_own ON agile_life.goals
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY goal_delete_own ON agile_life.goals
    FOR DELETE
    USING (auth.uid() = user_id);

-- TASK POLICIES
CREATE POLICY task_select_own ON agile_life.tasks
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY task_insert_own ON agile_life.tasks
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY task_update_own ON agile_life.tasks
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY task_delete_own ON agile_life.tasks
    FOR DELETE
    USING (auth.uid() = user_id);

-- TAG POLICIES
CREATE POLICY tag_select_own ON agile_life.tags
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY tag_insert_own ON agile_life.tags
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY tag_update_own ON agile_life.tags
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY tag_delete_own ON agile_life.tags
    FOR DELETE
    USING (auth.uid() = user_id);

-- DAILY CHECKUP POLICIES
CREATE POLICY daily_checkup_select_own ON agile_life.daily_checkups
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY daily_checkup_insert_own ON agile_life.daily_checkups
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY daily_checkup_update_own ON agile_life.daily_checkups
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY daily_checkup_delete_own ON agile_life.daily_checkups
    FOR DELETE
    USING (auth.uid() = user_id);

-- SPRINT REVIEW POLICIES
CREATE POLICY sprint_review_select_own ON agile_life.sprint_reviews
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY sprint_review_insert_own ON agile_life.sprint_reviews
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY sprint_review_update_own ON agile_life.sprint_reviews
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY sprint_review_delete_own ON agile_life.sprint_reviews
    FOR DELETE
    USING (auth.uid() = user_id);

-- NOTIFICATION POLICIES
CREATE POLICY notification_select_own ON agile_life.notifications
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY notification_insert_own ON agile_life.notifications
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY notification_update_own ON agile_life.notifications
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY notification_delete_own ON agile_life.notifications
    FOR DELETE
    USING (auth.uid() = user_id);


-- JUNCTION TABLE POLICIES
-- Task-Sprint Cross Refs
CREATE POLICY task_sprint_cross_ref_select ON agile_life.task_sprint_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_sprint_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_sprint_cross_ref_insert ON agile_life.task_sprint_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_sprint_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_sprint_cross_ref_delete ON agile_life.task_sprint_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_sprint_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

-- Task-Goal Cross Refs
CREATE POLICY task_goal_cross_ref_select ON agile_life.task_goal_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_goal_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_goal_cross_ref_insert ON agile_life.task_goal_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_goal_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_goal_cross_ref_delete ON agile_life.task_goal_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_goal_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

-- Goal-Sprint Cross Refs
CREATE POLICY goal_sprint_cross_ref_select ON agile_life.goal_sprint_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.goals
        WHERE goals.id = goal_sprint_cross_refs.goal_id
        AND goals.user_id = auth.uid()
    ));

CREATE POLICY goal_sprint_cross_ref_insert ON agile_life.goal_sprint_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.goals
        WHERE goals.id = goal_sprint_cross_refs.goal_id
        AND goals.user_id = auth.uid()
    ));

CREATE POLICY goal_sprint_cross_ref_delete ON agile_life.goal_sprint_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.goals
        WHERE goals.id = goal_sprint_cross_refs.goal_id
        AND goals.user_id = auth.uid()
    ));

-- Task Dependencies
CREATE POLICY task_dependency_select ON agile_life.task_dependencies
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_dependencies.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_dependency_insert ON agile_life.task_dependencies
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.tasks t1
        JOIN agile_life.tasks t2 ON t2.id = task_dependencies.depends_on_task_id
        WHERE t1.id = task_dependencies.task_id
        AND t1.user_id = auth.uid()
        AND t2.user_id = auth.uid()
    ));

CREATE POLICY task_dependency_delete ON agile_life.task_dependencies
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_dependencies.task_id
        AND tasks.user_id = auth.uid()
    ));

-- Tag Cross Refs (Task, Sprint, Goal)
CREATE POLICY task_tag_cross_ref_select ON agile_life.task_tag_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_tag_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY task_tag_cross_ref_insert ON agile_life.task_tag_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.tasks t
        JOIN agile_life.tags tg ON tg.id = task_tag_cross_refs.tag_id
        WHERE t.id = task_tag_cross_refs.task_id
        AND t.user_id = auth.uid()
        AND tg.user_id = auth.uid()
    ));

CREATE POLICY task_tag_cross_ref_delete ON agile_life.task_tag_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.tasks
        WHERE tasks.id = task_tag_cross_refs.task_id
        AND tasks.user_id = auth.uid()
    ));

CREATE POLICY sprint_tag_cross_ref_select ON agile_life.sprint_tag_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.sprints
        WHERE sprints.id = sprint_tag_cross_refs.sprint_id
        AND sprints.user_id = auth.uid()
    ));

CREATE POLICY sprint_tag_cross_ref_insert ON agile_life.sprint_tag_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.sprints s
        JOIN agile_life.tags tg ON tg.id = sprint_tag_cross_refs.tag_id
        WHERE s.id = sprint_tag_cross_refs.sprint_id
        AND s.user_id = auth.uid()
        AND tg.user_id = auth.uid()
    ));

CREATE POLICY sprint_tag_cross_ref_delete ON agile_life.sprint_tag_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.sprints
        WHERE sprints.id = sprint_tag_cross_refs.sprint_id
        AND sprints.user_id = auth.uid()
    ));

CREATE POLICY goal_tag_cross_ref_select ON agile_life.goal_tag_cross_refs
    FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM agile_life.goals
        WHERE goals.id = goal_tag_cross_refs.goal_id
        AND goals.user_id = auth.uid()
    ));

CREATE POLICY goal_tag_cross_ref_insert ON agile_life.goal_tag_cross_refs
    FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM agile_life.goals g
        JOIN agile_life.tags tg ON tg.id = goal_tag_cross_refs.tag_id
        WHERE g.id = goal_tag_cross_refs.goal_id
        AND g.user_id = auth.uid()
        AND tg.user_id = auth.uid()
    ));

CREATE POLICY goal_tag_cross_ref_delete ON agile_life.goal_tag_cross_refs
    FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM agile_life.goals
        WHERE goals.id = goal_tag_cross_refs.goal_id
        AND goals.user_id = auth.uid()
    ));


-- Adding primary keys to junction tables
-- 1. Add timestamp and UUID to task_sprint_cross_refs
ALTER TABLE agile_life.task_sprint_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.task_sprint_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.task_sprint_cross_refs DROP CONSTRAINT task_sprint_cross_refs_pkey;
ALTER TABLE agile_life.task_sprint_cross_refs ADD CONSTRAINT task_sprint_cross_refs_unique UNIQUE (task_id, sprint_id);

-- 2. Add timestamp and UUID to task_goal_cross_refs
ALTER TABLE agile_life.task_goal_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.task_goal_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.task_goal_cross_refs DROP CONSTRAINT task_goal_cross_refs_pkey;
ALTER TABLE agile_life.task_goal_cross_refs ADD CONSTRAINT task_goal_cross_refs_unique UNIQUE (task_id, goal_id);

-- 3. Add timestamp and UUID to goal_sprint_cross_refs
ALTER TABLE agile_life.goal_sprint_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.goal_sprint_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.goal_sprint_cross_refs DROP CONSTRAINT goal_sprint_cross_refs_pkey;
ALTER TABLE agile_life.goal_sprint_cross_refs ADD CONSTRAINT goal_sprint_cross_refs_unique UNIQUE (goal_id, sprint_id);

-- 4. Add timestamp and UUID to task_dependencies
ALTER TABLE agile_life.task_dependencies ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.task_dependencies ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.task_dependencies DROP CONSTRAINT task_dependencies_pkey;
ALTER TABLE agile_life.task_dependencies ADD CONSTRAINT task_dependencies_unique UNIQUE (task_id, depends_on_task_id);

-- 5. Add timestamp and UUID to task_tag_cross_refs
ALTER TABLE agile_life.task_tag_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.task_tag_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.task_tag_cross_refs DROP CONSTRAINT task_tag_cross_refs_pkey;
ALTER TABLE agile_life.task_tag_cross_refs ADD CONSTRAINT task_tag_cross_refs_unique UNIQUE (task_id, tag_id);

-- 6. Add timestamp and UUID to sprint_tag_cross_refs
ALTER TABLE agile_life.sprint_tag_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.sprint_tag_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.sprint_tag_cross_refs DROP CONSTRAINT sprint_tag_cross_refs_pkey;
ALTER TABLE agile_life.sprint_tag_cross_refs ADD CONSTRAINT sprint_tag_cross_refs_unique UNIQUE (sprint_id, tag_id);

-- 7. Add timestamp and UUID to goal_tag_cross_refs
ALTER TABLE agile_life.goal_tag_cross_refs ADD COLUMN id UUID PRIMARY KEY DEFAULT uuid_generate_v4();
ALTER TABLE agile_life.goal_tag_cross_refs ADD COLUMN created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
ALTER TABLE agile_life.goal_tag_cross_refs DROP CONSTRAINT goal_tag_cross_refs_pkey;
ALTER TABLE agile_life.goal_tag_cross_refs ADD CONSTRAINT goal_tag_cross_refs_unique UNIQUE (goal_id, tag_id);